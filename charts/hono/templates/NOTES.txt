Thank you for installing Eclipse Hono.

Your release is named '{{ .Release.Name }}'.

It might take some time for all of Hono's services to start up.
You can check the current status by issuing the following command:
{{ if ( eq .Release.Namespace "default" ) }}
  $ kubectl get pods
{{- else }}
  $ kubectl get -n {{ .Release.Namespace }} pods
{{- end }}

Once all services are up and running, the output should look similar to this:

NAME                                       {{ "READY   STATUS    RESTARTS   AGE" | indent ( len .Release.Name ) }}
{{ .Release.Name }}-adapter-amqp-vertx-65cfb4d675-g5wn4       1/1     Running   0          5m50s
{{ .Release.Name }}-adapter-http-vertx-66bd6bb89c-mng5t       1/1     Running   0          5m51s
{{ .Release.Name }}-adapter-mqtt-vertx-765fcd578b-5rl7n       1/1     Running   0          5m51s
{{ .Release.Name }}-artemis-f8f7dc7f4-864cj                   1/1     Running   0          5m51s
{{ .Release.Name }}-dispatch-router-6c77dc78bd-hjn4l          1/1     Running   0          5m51s
{{ .Release.Name }}-service-auth-84d9695cfc-5wlfh             1/1     Running   0          5m51s
{{ .Release.Name }}-service-command-router-687fd4fbcf-7527b   1/1     Running   0          5m51s
{{ .Release.Name }}-service-device-registry-0                 1/1     Running   0          5m51s

Once all pods have status 'Running', Hono is ready to be used.
{{- if (has "amqp" .Values.messagingNetworkTypes) }}

To learn more about Hono's functionality, you should follow the Getting started guide at
https://eclipse.org/hono/getting-started/
{{- end }}
{{- if (has "kafka" .Values.messagingNetworkTypes) }}
{{ if .Values.kafkaMessagingClusterExample.enabled }}
Hono is configured with an example Kafka cluster for messaging. To learn more about it, you
should follow the Kafka messaging guide at https://eclipse.org/hono/getting-started-kafka/
Clients can connect to the example Kafka cluster using the configuration properties below.
Please refer to the guide mentioned above for details on how to determine the values for
$KAFKA_IP and $KAFKA_TRUSTSTORE_PATH.

  bootstrap.servers=$KAFKA_IP:{{ .Values.kafka.service.externalPort }}
  security.protocol=SASL_SSL
  sasl.mechanism=SCRAM-SHA-512
  sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="{{ first .Values.kafka.auth.sasl.jaas.clientUsers }}" password="{{ first .Values.kafka.auth.sasl.jaas.clientPasswords }}";
  ssl.endpoint.identification.algorithm=""
  ssl.truststore.location=$KAFKA_TRUSTSTORE_PATH
  ssl.truststore.password={{ .Values.kafka.auth.tls.password | quote }}
{{- end }}
{{- end }}

Enjoy :-)

